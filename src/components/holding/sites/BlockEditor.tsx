import React, { useState } from 'react';
import {
  PlusIcon,
  TrashIcon,
  EyeIcon,
  DocumentDuplicateIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  Bars3Icon
} from '@heroicons/react/24/outline';
import { useSiteBlocks } from '@/hooks/useHoldingSites';
import { usePermissionsContext } from '@/contexts/PermissionsContext';
import { useTheme } from '@components/shared/ThemeProvider';
import type { SiteContentBlock, BlockType, CreateBlockRequest } from '@/types/holding-sites';

interface BlockEditorProps {
  siteId: number;
}

const BlockEditor: React.FC<BlockEditorProps> = ({ siteId }) => {
  const { can } = usePermissionsContext();
  const { getThemeClasses } = useTheme();
  const theme = getThemeClasses();
  
  const {
    blocks,
    loading,
    error,
    createBlock,
    updateBlock,
    deleteBlock,
    duplicateBlock,
    publishBlock,
    reorderBlocks
  } = useSiteBlocks(siteId);

  const [editingBlock, setEditingBlock] = useState<number | null>(null);
  const [showNewBlockModal, setShowNewBlockModal] = useState(false);
  const [newBlockType, setNewBlockType] = useState<BlockType>('hero');

  const blockTypes: Array<{ type: BlockType; name: string; description: string; icon: string }> = [
    { type: 'hero', name: 'Hero —Å–µ–∫—Ü–∏—è', description: '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π', icon: 'üéØ' },
    { type: 'about', name: '–û –Ω–∞—Å', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏', icon: 'üìã' },
    { type: 'services', name: '–£—Å–ª—É–≥–∏', description: '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', icon: '‚öôÔ∏è' },
    { type: 'projects', name: '–ü—Ä–æ–µ–∫—Ç—ã', description: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –∫–µ–π—Å—ã', icon: 'üèóÔ∏è' },
    { type: 'team', name: '–ö–æ–º–∞–Ω–¥–∞', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö', icon: 'üë•' },
    { type: 'contacts', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', description: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: 'üìû' },
    { type: 'gallery', name: '–ì–∞–ª–µ—Ä–µ—è', description: '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è', icon: 'üñºÔ∏è' },
    { type: 'news', name: '–ù–æ–≤–æ—Å—Ç–∏', description: '–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç–µ–π', icon: 'üì∞' },
    { type: 'custom', name: '–ö–∞—Å—Ç–æ–º–Ω—ã–π', description: '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –±–ª–æ–∫', icon: 'üß©' }
  ];

  const getBlockTypeName = (type: BlockType) => {
    return blockTypes.find(bt => bt.type === type)?.name || type;
  };

  const getBlockIcon = (type: BlockType) => {
    return blockTypes.find(bt => bt.type === type)?.icon || 'üìÑ';
  };

  const getStatusBadge = (block: SiteContentBlock) => {
    const isPublished = block.status === 'published';
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
        isPublished ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
      }`}>
        {isPublished ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}
      </span>
    );
  };

  const handleCreateBlock = async () => {
    const blockData: CreateBlockRequest = {
      block_type: newBlockType,
      title: `–ù–æ–≤—ã–π –±–ª–æ–∫ "${getBlockTypeName(newBlockType)}"`,
      content: getDefaultContent(newBlockType),
      sort_order: blocks.length + 1
    };

    const newBlock = await createBlock(blockData);
    if (newBlock) {
      setShowNewBlockModal(false);
      setEditingBlock(newBlock.id);
    }
  };

  const getDefaultContent = (type: BlockType) => {
    const defaults = {
      hero: { title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', subtitle: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', description: '–û–ø–∏—Å–∞–Ω–∏–µ' },
      about: { title: '–û –Ω–∞—Å', description: '<p>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</p>' },
      services: { title: '–£—Å–ª—É–≥–∏', services: [] },
      projects: { title: '–ü—Ä–æ–µ–∫—Ç—ã', projects: [] },
      team: { title: '–ö–æ–º–∞–Ω–¥–∞', members: [] },
      contacts: { title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' },
      gallery: { title: '–ì–∞–ª–µ—Ä–µ—è', images: [] },
      news: { title: '–ù–æ–≤–æ—Å—Ç–∏', articles: [] },
      custom: {}
    };
    return defaults[type] || {};
  };

  const handleMoveBlock = async (blockId: number, direction: 'up' | 'down') => {
    const currentIndex = blocks.findIndex(b => b.id === blockId);
    if (currentIndex === -1) return;

    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= blocks.length) return;

    const newOrder = [...blocks];
    [newOrder[currentIndex], newOrder[newIndex]] = [newOrder[newIndex], newOrder[currentIndex]];
    
    await reorderBlocks(newOrder.map(b => b.id));
  };

  const handlePublishBlock = async (blockId: number) => {
    await publishBlock(blockId);
  };

  const handleDuplicateBlock = async (blockId: number) => {
    await duplicateBlock(blockId);
  };

  const handleDeleteBlock = async (blockId: number) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫?')) {
      await deleteBlock(blockId);
    }
  };

  if (!can('multi-organization.website.blocks.edit')) {
    return (
      <div className="text-center py-8">
        <h3 className="text-lg font-medium text-gray-900 mb-2">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h3>
        <p className="text-gray-600">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">–ë–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
          <p className="text-gray-600 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
        </div>
        
        {can('multi-organization.website.blocks.create') && (
          <button
            onClick={() => setShowNewBlockModal(true)}
            className={`${theme.primary} ${theme.hover} text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center gap-2`}
          >
            <PlusIcon className="h-4 w-4" />
            –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫
          </button>
        )}
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-800">{error}</p>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ */}
      {loading && blocks.length === 0 ? (
        <div className="text-center py-8">
          <div className="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500"></div>
          <p className="text-gray-600 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–æ–∫–æ–≤...</p>
        </div>
      ) : blocks.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <div className="text-4xl mb-4">üìÑ</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–µ—Ç –±–ª–æ–∫–æ–≤</h3>
          <p className="text-gray-600 mb-4">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
          {can('multi-organization.website.blocks.create') && (
            <button
              onClick={() => setShowNewBlockModal(true)}
              className={`${theme.primary} ${theme.hover} text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors`}
            >
              –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫
            </button>
          )}
        </div>
      ) : (
        <div className="space-y-4">
          {blocks.map((block, index) => (
            <div
              key={block.id}
              className={`bg-white rounded-lg border-2 transition-colors ${
                editingBlock === block.id 
                  ? 'border-primary-300 shadow-md' 
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{getBlockIcon(block.block_type)}</span>
                    <div>
                      <div className="flex items-center gap-3">
                        <h3 className="font-medium text-gray-900">{block.title}</h3>
                        {getStatusBadge(block)}
                      </div>
                      <p className="text-sm text-gray-500">
                        {getBlockTypeName(block.block_type)} ‚Ä¢ –ü–æ—Ä—è–¥–æ–∫: {block.sort_order}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º */}
                    <button
                      onClick={() => handleMoveBlock(block.id, 'up')}
                      disabled={index === 0}
                      className="p-1 text-gray-400 hover:text-gray-600 disabled:opacity-30"
                      title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                    >
                      <ArrowUpIcon className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => handleMoveBlock(block.id, 'down')}
                      disabled={index === blocks.length - 1}
                      className="p-1 text-gray-400 hover:text-gray-600 disabled:opacity-30"
                      title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                    >
                      <ArrowDownIcon className="h-4 w-4" />
                    </button>

                    {/* –î–µ–π—Å—Ç–≤–∏—è */}
                    <button
                      onClick={() => setEditingBlock(editingBlock === block.id ? null : block.id)}
                      className="p-2 text-gray-400 hover:text-gray-600"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      <Bars3Icon className="h-4 w-4" />
                    </button>

                    {can('multi-organization.website.blocks.publish') && block.status === 'draft' && (
                      <button
                        onClick={() => handlePublishBlock(block.id)}
                        className="p-2 text-green-400 hover:text-green-600"
                        title="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
                      >
                        <EyeIcon className="h-4 w-4" />
                      </button>
                    )}

                    {can('multi-organization.website.blocks.create') && (
                      <button
                        onClick={() => handleDuplicateBlock(block.id)}
                        className="p-2 text-blue-400 hover:text-blue-600"
                        title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        <DocumentDuplicateIcon className="h-4 w-4" />
                      </button>
                    )}

                    {can('multi-organization.website.blocks.delete') && block.can_delete && (
                      <button
                        onClick={() => handleDeleteBlock(block.id)}
                        className="p-2 text-red-400 hover:text-red-600"
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        <TrashIcon className="h-4 w-4" />
                      </button>
                    )}
                  </div>
                </div>

                {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {editingBlock === block.id && (
                  <div className="mt-4 pt-4 border-t border-gray-200">
                    <BlockEditForm 
                      block={block} 
                      onSave={async (data) => {
                        await updateBlock(block.id, data);
                        setEditingBlock(null);
                      }}
                      onCancel={() => setEditingBlock(null)}
                    />
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ */}
      {showNewBlockModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {blockTypes.map((type) => (
                <button
                  key={type.type}
                  onClick={() => setNewBlockType(type.type)}
                  className={`p-4 text-left border-2 rounded-lg transition-colors ${
                    newBlockType === type.type
                      ? 'border-primary-300 bg-primary-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">{type.icon}</span>
                    <div>
                      <h4 className="font-medium text-gray-900">{type.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{type.description}</p>
                    </div>
                  </div>
                </button>
              ))}
            </div>

            <div className="flex items-center justify-end gap-3">
              <button
                onClick={() => setShowNewBlockModal(false)}
                className="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleCreateBlock}
                className={`${theme.primary} ${theme.hover} text-white px-4 py-2 rounded-lg transition-colors`}
              >
                –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞
const BlockEditForm: React.FC<{
  block: SiteContentBlock;
  onSave: (data: any) => void;
  onCancel: () => void;
}> = ({ block, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    title: block.title,
    content: block.content,
    is_active: block.is_active
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  const handleContentChange = (key: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      content: {
        ...prev.content,
        [key]: value
      }
    }));
  };

  const renderContentFields = () => {
    switch (block.block_type) {
      case 'hero':
        return (
          <>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
              <input
                type="text"
                value={formData.content.title || ''}
                onChange={(e) => handleContentChange('title', e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</label>
              <input
                type="text"
                value={formData.content.subtitle || ''}
                onChange={(e) => handleContentChange('subtitle', e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={formData.content.description || ''}
                onChange={(e) => handleContentChange('description', e.target.value)}
                rows={3}
                className="w-full border border-gray-300 rounded-lg px-3 py-2"
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</label>
                <input
                  type="text"
                  value={formData.content.button_text || ''}
                  onChange={(e) => handleContentChange('button_text', e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏</label>
                <input
                  type="url"
                  value={formData.content.button_url || ''}
                  onChange={(e) => handleContentChange('button_url', e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                />
              </div>
            </div>
          </>
        );
      
      default:
        return (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (JSON)</label>
            <textarea
              value={JSON.stringify(formData.content, null, 2)}
              onChange={(e) => {
                try {
                  const parsed = JSON.parse(e.target.value);
                  setFormData(prev => ({ ...prev, content: parsed }));
                } catch {}
              }}
              rows={10}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 font-mono text-sm"
            />
          </div>
        );
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞</label>
        <input
          type="text"
          value={formData.title}
          onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
          className="w-full border border-gray-300 rounded-lg px-3 py-2"
          required
        />
      </div>

      {renderContentFields()}

      <div className="flex items-center gap-2">
        <input
          type="checkbox"
          id={`active-${block.id}`}
          checked={formData.is_active}
          onChange={(e) => setFormData(prev => ({ ...prev, is_active: e.target.checked }))}
          className="rounded border-gray-300"
        />
        <label htmlFor={`active-${block.id}`} className="text-sm text-gray-700">
          –ë–ª–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω
        </label>
      </div>

      <div className="flex items-center gap-3 pt-4">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
        <button
          type="submit"
          className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
      </div>
    </form>
  );
};

export default BlockEditor;
