interface BusinessTypeSelectorProps {
  selectedType: string | null;
  onChange: (type: string) => void;
  disabled?: boolean;
}

const BUSINESS_TYPES = [
  {
    value: 'general_contracting',
    label: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ–¥—Ä—è–¥',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º',
    icon: 'üèóÔ∏è'
  },
  {
    value: 'subcontracting',
    label: '–°—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
    description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞',
    icon: 'üîß'
  },
  {
    value: 'design',
    label: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
    icon: 'üìê'
  },
  {
    value: 'construction_supervision',
    label: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
    description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä –∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º',
    icon: 'üë∑'
  },
  {
    value: 'equipment_rental',
    label: '–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∏',
    description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
    icon: 'üöú'
  },
  {
    value: 'materials_supply',
    label: '–ü–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    description: '–ü–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    icon: 'üì¶'
  },
  {
    value: 'consulting',
    label: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
    description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ',
    icon: 'üíº'
  },
  {
    value: 'facility_management',
    label: '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤',
    description: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –∑–¥–∞–Ω–∏–π',
    icon: 'üè¢'
  }
];

export const BusinessTypeSelector = ({
  selectedType,
  onChange,
  disabled = false
}: BusinessTypeSelectorProps) => {
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {BUSINESS_TYPES.map(type => {
          const isSelected = selectedType === type.value;

          return (
            <div
              key={type.value}
              className={`
                relative border-2 rounded-lg p-4 cursor-pointer transition-all duration-200
                ${isSelected 
                  ? 'border-construction-500 bg-construction-50 shadow-lg scale-105' 
                  : 'border-gray-200 bg-white hover:border-construction-300 hover:shadow-md'
                }
                ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
              `}
              onClick={() => !disabled && onChange(type.value)}
            >
              {isSelected && (
                <div className="absolute -top-2 -right-2 w-6 h-6 bg-construction-500 rounded-full flex items-center justify-center">
                  <svg className="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
              )}

              <div className="text-center space-y-2">
                <div className="text-4xl">{type.icon}</div>
                <h4 className={`text-base font-semibold ${isSelected ? 'text-construction-900' : 'text-gray-900'}`}>
                  {type.label}
                </h4>
                <p className="text-xs text-gray-600">
                  {type.description}
                </p>
              </div>
            </div>
          );
        })}
      </div>

      {!selectedType && (
        <p className="text-sm text-gray-500 text-center py-2">
          –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        </p>
      )}
    </div>
  );
};

