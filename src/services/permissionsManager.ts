import {
  PermissionsData,
  PermissionsResponse,
  CheckPermissionRequest,
  CheckPermissionResponse,
  CanAccessOptions,
  Permission,
  SystemRole,
  AccessInterface,
  ActiveModule
} from '@/types/permissions';
import { getTokenFromStorages } from '@/utils/api';

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≥–∞–π–¥–µ QUICK_START_PERMISSIONS.md
 */
export class PermissionsManager {
  private permissions: string[] = [];
  private roles: string[] = [];
  private interfaces: string[] = [];
  private activeModules: string[] = [];
  private userId: number | null = null;
  private organizationId: number | null = null;
  private isLoaded = false;
  private isLoading = false;
  private lastLoadTime = 0;
  private loadPromise: Promise<boolean> | null = null;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–±–∞—É–Ω—Å–∞
  private readonly MIN_RELOAD_INTERVAL = 300000; // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç 429)
  private readonly REQUEST_TIMEOUT = 15000; // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞

  constructor() {
    this.permissions = [];
    this.roles = [];
    this.interfaces = [];
    this.activeModules = [];
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async load(interfaceType: AccessInterface = 'lk'): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º
    const now = Date.now();
    if (this.isLoaded && this.lastLoadTime && (now - this.lastLoadTime) < this.MIN_RELOAD_INTERVAL) {
      console.log(`‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∞–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${Math.ceil((this.MIN_RELOAD_INTERVAL - (now - this.lastLoadTime)) / 1000)}—Å`);
      return this.isLoaded;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–∏—Å
    if (this.loadPromise) {
      console.log('‚è≥ –ü—Ä–∞–≤–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –∂–¥–µ–º...');
      return this.loadPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    this.loadPromise = this.performLoad(interfaceType);
    const result = await this.loadPromise;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–∏—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.loadPromise = null;
    if (result) {
      this.lastLoadTime = Date.now();
    }
    
    return result;
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private async performLoad(interfaceType: AccessInterface): Promise<boolean> {
    if (this.isLoading) {
      return false;
    }

    try {
      this.isLoading = true;
      const token = this.getToken();
      
      if (!token) {
        console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return false;
      }

      const endpoint = this.getEndpoint(interfaceType);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.REQUEST_TIMEOUT);

      console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤ —Å: ${endpoint}`);

      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText} –¥–ª—è ${endpoint}`);
        
        // –ï—Å–ª–∏ 404, –∑–Ω–∞—á–∏—Ç endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω–µ –Ω—É–∂–Ω–æ —Å–ø–∞–º–∏—Ç—å
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint –ø—Ä–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è API.');
          return false;
        }
        
        return false;
      }

      const data: PermissionsResponse = await response.json();

      if (data.success && data.data) {
        this.permissions = data.data.permissions_flat || [];
        this.roles = data.data.roles || [];
        this.interfaces = data.data.interfaces || [];
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª–µ–º slug
        const rawModules: any = (data as any).data?.active_modules ?? [];
        let normalized: string[] = [];
        if (Array.isArray(rawModules)) {
          if (rawModules.length === 0) {
            normalized = [];
          } else if (typeof rawModules[0] === 'string') {
            normalized = rawModules as string[];
          } else if (typeof rawModules[0] === 'object') {
            normalized = (rawModules as any[])
              .map((m) => (m?.slug ? String(m.slug) : null))
              .filter((s): s is string => Boolean(s));
          }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã c –¥–µ—Ñ–∏—Å–æ–º/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const withSynonyms = new Set<string>();
        normalized.forEach((s) => {
          withSynonyms.add(s);
          if (s.includes('-')) withSynonyms.add(s.replace(/-/g, '_'));
          if (s.includes('_')) withSynonyms.add(s.replace(/_/g, '-'));
        });
        this.activeModules = Array.from(withSynonyms);
        this.userId = data.data.user_id || null;
        this.organizationId = data.data.organization_id || null;
        this.isLoaded = true;

        console.log('‚úÖ –ü—Ä–∞–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
          permissions: this.permissions.length,
          roles: this.roles,
          modules: this.activeModules
        });

        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤:', data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        return false;
      }
    } catch (error: any) {
      if (error.name === 'AbortError') {
        console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤:', error);
      }
      return false;
    } finally {
      this.isLoading = false;
    }
  }


  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ
   */
  can(permission: Permission): boolean {
    if (!this.isLoaded) {
      console.warn('‚ö†Ô∏è –ü—Ä–∞–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load() —Å–Ω–∞—á–∞–ª–∞.');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ wildcard –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, projects.*)
    if (permission.includes('.')) {
      const [module] = permission.split('.');
      const wildcardPermission = `${module}.*`;
      
      if (this.permissions.includes(wildcardPermission)) {
        return true;
      }
    }

    return this.permissions.includes(permission);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å
   */
  hasRole(role: SystemRole | string): boolean {
    if (!this.isLoaded) {
      console.warn('‚ö†Ô∏è –ü—Ä–∞–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load() —Å–Ω–∞—á–∞–ª–∞.');
      return false;
    }
    
    return this.roles.includes(role);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å
   */
  hasModule(module: ActiveModule | string): boolean {
    if (!this.isLoaded) {
      console.warn('‚ö†Ô∏è –ü—Ä–∞–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load() —Å–Ω–∞—á–∞–ª–∞.');
      return false;
    }
    
    return this.activeModules.includes(module);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
   */
  canAccessInterface(interfaceName: AccessInterface): boolean {
    if (!this.isLoaded) {
      console.warn('‚ö†Ô∏è –ü—Ä–∞–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load() —Å–Ω–∞—á–∞–ª–∞.');
      return false;
    }
    
    return this.interfaces.includes(interfaceName);
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
   */
  canAccess(options: CanAccessOptions): boolean {
    if (!this.isLoaded) {
      console.warn('‚ö†Ô∏è –ü—Ä–∞–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load() —Å–Ω–∞—á–∞–ª–∞.');
      return false;
    }

    const { 
      permission, 
      role, 
      module, 
      interface: interfaceName, 
      requireAll = true 
    } = options;

    const checks: boolean[] = [];

    if (permission !== undefined) {
      checks.push(this.can(permission));
    }
    
    if (role !== undefined) {
      checks.push(this.hasRole(role));
    }
    
    if (module !== undefined) {
      checks.push(this.hasModule(module));
    }
    
    if (interfaceName !== undefined) {
      checks.push(this.canAccessInterface(interfaceName));
    }

    if (checks.length === 0) {
      return true; // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
    }

    // AND –ª–æ–≥–∏–∫–∞ - –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    if (requireAll) {
      return checks.every(check => check);
    }
    
    // OR –ª–æ–≥–∏–∫–∞ - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏  
    return checks.some(check => check);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ —á–µ—Ä–µ–∑ API (–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ)
   */
  async checkPermission(
    permission: Permission,
    context?: CheckPermissionRequest['context'],
    interfaceType: AccessInterface = 'lk'
  ): Promise<boolean> {
    try {
      const token = this.getToken();
      if (!token) return false;

      const response = await fetch('https://api.prohelper.pro/api/lk/v1/permissions/check', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          permission,
          context,
          interface: interfaceType
        })
      });

      const data: CheckPermissionResponse = await response.json();
      return data.success ? data.data.has_permission : false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–≤–∞—Ö
   */
  getPermissions(): PermissionsData {
    return {
      user_id: this.userId || 0,
      organization_id: this.organizationId,
      permissions_flat: [...this.permissions],
      roles: [...this.roles],
      interfaces: [...this.interfaces],
      active_modules: [...this.activeModules]
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø—Ä–∞–≤–∞
   */
  isReady(): boolean {
    return this.isLoaded;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∞ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)
   */
  clear(): void {
    this.permissions = [];
    this.roles = [];
    this.interfaces = [];
    this.activeModules = [];
    this.userId = null;
    this.organizationId = null;
    this.isLoaded = false;
    this.isLoading = false;
    
    console.log('üßπ –ü—Ä–∞–≤–∞ –æ—á–∏—â–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ storage
   */
  private getToken(): string | null {
    return getTokenFromStorages();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  private getEndpoint(interfaceType: AccessInterface): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π API_URL –∏ —Å—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    const baseUrl = 'https://api.prohelper.pro/api';
    const endpoints = {
      'lk': `${baseUrl}/lk/v1/permissions`,
      'admin': `${baseUrl}/admin/v1/permissions`, 
      'mobile': `${baseUrl}/mobile/v1/permissions`
    };
    
    return endpoints[interfaceType];
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
  debug = {
    show: () => {
      if (process.env.NODE_ENV !== 'development') return;
      console.table(this.permissions);
    },
    
    can: (permission: Permission) => {
      if (process.env.NODE_ENV !== 'development') return false;
      const result = this.can(permission);
      console.log(`üîí ${permission}: ${result ? '‚úÖ –†–ê–ó–†–ï–®–ï–ù–û' : '‚ùå –ó–ê–ü–†–ï–©–ï–ù–û'}`);
      return result;
    },
    
    roles: () => {
      if (process.env.NODE_ENV !== 'development') return [];
      console.log('üë§ –†–æ–ª–∏:', this.roles);
      return this.roles;
    },
    
    modules: () => {
      if (process.env.NODE_ENV !== 'development') return [];
      console.log('üì¶ –ú–æ–¥—É–ª–∏:', this.activeModules);
      return this.activeModules;
    },
    
    reload: () => this.load()
  };
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const permissionsManager = new PermissionsManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è window (–æ—Ç–ª–∞–¥–∫–∞)
if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {
  (window as any).DEBUG_PERMISSIONS = permissionsManager.debug;
  console.log('üîß –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–Ω–∞:', 'DEBUG_PERMISSIONS');
}
