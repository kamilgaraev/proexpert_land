import React, { createContext, useContext, useEffect, useState, useCallback, useRef } from 'react';
import { permissionsManager } from '@/services/permissionsManager';
import { getTokenFromStorages } from '@/utils/api';
import {
  PermissionsData,
  CanAccessOptions,
  Permission,
  SystemRole,
  AccessInterface,
  ActiveModule
} from '@/types/permissions';

interface PermissionsContextType {
  // –î–∞–Ω–Ω—ã–µ
  permissions: PermissionsData;
  isLoaded: boolean;
  isLoading: boolean;
  error: string | null;
  
  // –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
  can: (permission: Permission) => boolean;
  hasRole: (role: SystemRole | string) => boolean;
  hasModule: (module: ActiveModule | string) => boolean;
  canAccessInterface: (interfaceName: AccessInterface) => boolean;
  canAccess: (options: CanAccessOptions) => boolean;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  load: (interfaceType?: AccessInterface) => Promise<boolean>;
  reload: () => Promise<boolean>;
  clear: () => void;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
  checkPermission: (
    permission: Permission,
    context?: any,
    interfaceType?: AccessInterface
  ) => Promise<boolean>;
}

const PermissionsContext = createContext<PermissionsContextType | undefined>(undefined);

interface PermissionsProviderProps {
  children: React.ReactNode;
  autoLoad?: boolean;
  interfaceType?: AccessInterface;
  refreshInterval?: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

export const PermissionsProvider: React.FC<PermissionsProviderProps> = ({
  children,
  autoLoad = true,
  interfaceType = 'lk',
  refreshInterval = 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±—ã–ª–æ 5)
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [permissions, setPermissions] = useState<PermissionsData>({
    user_id: 0,
    organization_id: null,
    permissions_flat: [],
    roles: [],
    interfaces: [],
    active_modules: []
  });
  
  const hasAutoLoaded = useRef(false);

  const updatePermissions = useCallback(() => {
    const data = permissionsManager.getPermissions();
    setPermissions(data);
    setIsLoaded(permissionsManager.isReady());
  }, []);

  const load = useCallback(async (iType: AccessInterface = interfaceType): Promise<boolean> => {
    setIsLoading(true);
    setError(null);

    try {
      const success = await permissionsManager.load(iType);
      
      if (success) {
        updatePermissions();
        setError(null);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
      }
      
      return success;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤:', err);
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [interfaceType, updatePermissions]);

  const reload = useCallback(async (): Promise<boolean> => {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤...');
    return await load();
  }, [load]);

  const clear = useCallback(() => {
    permissionsManager.clear();
    setPermissions({
      user_id: 0,
      organization_id: null,
      permissions_flat: [],
      roles: [],
      interfaces: [],
      active_modules: []
    });
    setIsLoaded(false);
    setError(null);
    hasAutoLoaded.current = false;
  }, []);

  // –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–æ–∫—Å–∏ –∫ permissionsManager)
  const can = useCallback((permission: Permission): boolean => {
    return permissionsManager.can(permission);
  }, []);

  const hasRole = useCallback((role: SystemRole | string): boolean => {
    return permissionsManager.hasRole(role);
  }, []);

  const hasModule = useCallback((module: ActiveModule | string): boolean => {
    return permissionsManager.hasModule(module);
  }, []);

  const canAccessInterface = useCallback((interfaceName: AccessInterface): boolean => {
    return permissionsManager.canAccessInterface(interfaceName);
  }, []);

  const canAccess = useCallback((options: CanAccessOptions): boolean => {
    return permissionsManager.canAccess(options);
  }, []);

  const checkPermission = useCallback(async (
    permission: Permission,
    context?: any,
    iType: AccessInterface = interfaceType
  ): Promise<boolean> => {
    return await permissionsManager.checkPermission(permission, context, iType);
  }, [interfaceType]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (autoLoad && !hasAutoLoaded.current) {
      const token = getTokenFromStorages();
      if (token) {
        hasAutoLoaded.current = true;
        load();
      } else {
        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∞–≤');
      }
    }
  }, [autoLoad, load]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ)
  useEffect(() => {
    if (!refreshInterval || refreshInterval <= 0 || !isLoaded || error) {
      return;
    }

    const interval = setInterval(() => {
      if (isLoaded && !isLoading && !error) {
        console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤...');
        reload().catch(err => {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤:', err);
        });
      }
    }, refreshInterval);

    return () => clearInterval(interval);
  }, [refreshInterval, isLoaded, isLoading, error, reload]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'organization_id' || e.key === 'token' || e.key === 'authToken') {
        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ localStorage, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∞...');
        hasAutoLoaded.current = false;
        reload();
      }
    };

    const handleOrganizationChange = () => {
      console.log('üîÑ –°–º–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∞...');
      reload();
    };

    const handleLogin = () => {
      console.log('üîÑ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∞...');
      hasAutoLoaded.current = false;
      load();
    };

    const handleLogout = () => {
      console.log('üîÑ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –æ—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∞...');
      clear();
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è localStorage
    window.addEventListener('storage', handleStorageChange);
    
    // –°–ª—É—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    window.addEventListener('organization-changed', handleOrganizationChange);
    window.addEventListener('user-login', handleLogin);
    window.addEventListener('user-logout', handleLogout);

    return () => {
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('organization-changed', handleOrganizationChange);
      window.removeEventListener('user-login', handleLogin);
      window.removeEventListener('user-logout', handleLogout);
    };
  }, [load, reload, clear]);

  const contextValue: PermissionsContextType = {
    permissions,
    isLoaded,
    isLoading,
    error,
    can,
    hasRole,
    hasModule,
    canAccessInterface,
    canAccess,
    load,
    reload,
    clear,
    checkPermission
  };

  return (
    <PermissionsContext.Provider value={contextValue}>
      {children}
    </PermissionsContext.Provider>
  );
};

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */
export const usePermissionsContext = (): PermissionsContextType => {
  const context = useContext(PermissionsContext);
  if (context === undefined) {
    throw new Error('usePermissionsContext must be used within a PermissionsProvider');
  }
  return context;
};
